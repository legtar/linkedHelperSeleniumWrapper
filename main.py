import os
import time
import math
import traceback
import requests  # –î–ª—è Telegram
from datetime import datetime, timedelta
from glob import glob  # –î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É
import logging # –ò—Å–ø–æ–ª—å–∑—É–µ–º logging –¥–ª—è –≤—ã–≤–æ–¥–∞

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import (
    TimeoutException, NoSuchElementException, WebDriverException,
    ElementClickInterceptedException, StaleElementReferenceException,
    ElementNotInteractableException
)
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.chrome.service import Service as ChromeService

# --- –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config-—Ñ–∞–π–ª!
LINKEDHELPER_EMAIL = os.environ.get("LH_EMAIL", "aleksey.kuznetsof@gmail.com") # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
LINKEDHELPER_PASSWORD = os.environ.get("LH_PASSWORD", "14052201") # –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("TG_BOT_TOKEN", "764asd9325049:AAEqazi3Dp_cIL-tJiznNb2RlAk7cCCmsjA") # –ü—Ä–∏–º–µ—Ä
CHAT_ID = os.environ.get("TG_CHAT_ID", "4572432783873") # –ü—Ä–∏–º–µ—Ä

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
CURRENT_DATE_STR = datetime.now().strftime("%d_%m_%Y")
PROFILES_INPUT_FILE = f'profile_urls_{CURRENT_DATE_STR}.csv' # –ò–º—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
PROCESSED_BATCH_LOG_FILE = 'processed_batches.log' # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞
DOWNLOAD_DIR = os.getcwd() # –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium –∏ WebDriver
CHROMEDRIVER_PATH = None  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å, –µ—Å–ª–∏ chromedriver –Ω–µ –≤ PATH
WEBDRIVER_TIMEOUT = 25 # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
IFRAME_TIMEOUT = 60 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ iframe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
BATCH_SIZE = 50 # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ URL
MAX_BATCH_ADD_RETRIES = 3 # –ü–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –±–∞—Ç—á
BATCH_RETRY_WAIT_SECONDS = 5 # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞
BATCH_PROCESS_WAIT_TIME = 1 # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É—Å–ø–µ—à–Ω—ã–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏ –±–∞—Ç—á–µ–π (—Å–µ–∫)

SECONDS_PER_20_PROFILES_PROCESS = 10 # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
MIN_PROCESS_WAIT_SECONDS = 15 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
DOWNLOAD_WAIT_SECONDS = 60  # –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
DOWNLOAD_CHECK_INTERVAL = 3 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ (—Å–µ–∫)
DOWNLOAD_CHECK_ADDITIONAL_TIME = 15 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ DOWNLOAD_WAIT_SECONDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
MAX_SCRIPT_RETRIES = 5 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –≤—Å–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
RETRY_DELAY_SECONDS = 10 # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏

# URL –∏ XPath (–ú–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ UI Linked Helper!)
LH_LOGIN_URL = "https://www.linkedhelper.com/member/"
XPATHS = {
    "login_button_div": "//div[contains(text(), 'Log in')]",
    "login_button_button": "//button[contains(text(), 'Log in')]",
    "email_field": "//input[@name='email']",
    "password_field": "//input[@name='password']",
    "instance_status_idle": "//span[contains(text(), 'idle')]",
    "launch_button_idle": "//div[@data-tour-step-name='LaunchInstance']/button[1]",
    "instance_status_stopped": "//span[contains(text(), 'stopped')]",
    "launch_button_stopped": "//div[@data-tour-step-name='LaunchInstance']/span/button[1]",
    "start_remote_button": "//span[contains(text(), 'Start account on remote machine')]", # –ù–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    "iframe_instance": "instance",
    "campaigns_menu_button": "//span[contains(text(), 'Campaigns')]//../div/button",
    "campaign_link_hr_emails": "//a[contains(text(), 'hr emails')]",
    "add_profile_button": "//span[(text()='Add')]",
    "upload_urls_tab": "//div[contains(text(), 'Upload Profiles URLs')]",
    "profile_urls_textarea": "//textarea[@placeholder='Text with LinkedIn profiles URLs']",
    "import_button": "//span[(text()='Import')]",
    "expand_campaign_button": "((//a[contains(text(), 'hr emails')])[1]//../div/button)[2]", # –•—Ä—É–ø–∫–∏–π XPath
    "new_queue_link": "((//a[contains(text(), 'hr emails')])[1]//..//..//div[2]//div[2]//div[1])[2]/a", # –•—Ä—É–ø–∫–∏–π XPath
    "select_all_new_checkbox": "(//div[(text()='Select rows to see more features')])[2]/../../div[1]/label/input", # –•—Ä—É–ø–∫–∏–π XPath
    "add_tag_button": "//div[@style='--table-grid-template-columns-default: min-content;']/div[1]/div[2]/button[5]", # –•—Ä—É–ø–∫–∏–π XPath
    "tag_input_field": "(//input[@placeholder='Tag name'])[3]", # –•—Ä—É–ø–∫–∏–π XPath
    "save_tag_button": "//span[contains(text(), 'Save')]",
    "start_campaign_button": "(//a[contains(text(), 'hr emails')])[1]//../div/button[1]", # –•—Ä—É–ø–∫–∏–π XPath
    "successful_list_link": "(//a[contains(text(), 'hr emails')])[1]//..//..//div[2]//div[4]", # –•—Ä—É–ø–∫–∏–π XPath
    "tag_filter_input": "(//input[@placeholder='Tag name'])[1]", # –•—Ä—É–ø–∫–∏–π XPath
    "select_all_successful_checkbox": "(//div[(text()='Select rows to see more features')])[2]/../../div[1]/label/input", # –•—Ä—É–ø–∫–∏–π XPath
    "download_button": "//div[@style='--table-grid-template-columns-default: min-content;']/div[1]/div[2]/button[2]", # –•—Ä—É–ø–∫–∏–π XPath
    "confirm_download_button": "//span[contains(text(), 'Download')]",
    "no_profiles_indicator": "//div[contains(text(), 'No profiles yet')] | //div[contains(text(), 'No items found')]",
}

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç."""
    if not BOT_TOKEN or not CHAT_ID:
        logging.warning("[Telegram] BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return False
    payload = {
        'chat_id': CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        logging.info("[Telegram] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return True
    except requests.exceptions.RequestException as e:
        logging.error(f"[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        logging.error(f"[Telegram] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False

def write_last_processed_batch_index(index):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞."""
    try:
        with open(PROCESSED_BATCH_LOG_FILE, 'w') as f:
            f.write(str(index))
        logging.info(f"–ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞ ({index}) –∑–∞–ø–∏—Å–∞–Ω –≤ {PROCESSED_BATCH_LOG_FILE}")
    except Exception as e:
        logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–µ–π –≤ {PROCESSED_BATCH_LOG_FILE}: {e}")
        send_telegram_message(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–µ–π –≤ {PROCESSED_BATCH_LOG_FILE}. –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞!")
        # raise # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞

def read_last_processed_batch_index():
    """–ß–∏—Ç–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞."""
    if not os.path.exists(PROCESSED_BATCH_LOG_FILE):
        logging.info(f"–§–∞–π–ª –ª–æ–≥–∞ {PROCESSED_BATCH_LOG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞.")
        return -1
    try:
        with open(PROCESSED_BATCH_LOG_FILE, 'r') as f:
            content = f.read().strip()
            if content:
                index = int(content)
                logging.info(f"–ù–∞–π–¥–µ–Ω –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –±–∞—Ç—á–∞: {index}")
                return index
            else:
                logging.warning(f"–§–∞–π–ª –ª–æ–≥–∞ {PROCESSED_BATCH_LOG_FILE} –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞.")
                return -1
    except ValueError:
        logging.warning(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {PROCESSED_BATCH_LOG_FILE} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞.")
        return -1
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ {PROCESSED_BATCH_LOG_FILE}: {e}. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –±–∞—Ç—á–∞.")
        return -1

def read_profile_urls(filename):
    """–ß–∏—Ç–∞–µ—Ç URL –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    urls = []
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            urls = [line.strip() for line in f if line.strip() and line.startswith('http')]
        if not urls:
            logging.warning(f"–§–∞–π–ª '{filename}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö URL.")
        else:
             logging.info(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(urls)} URL –∏–∑ —Ñ–∞–π–ª–∞ '{filename}'.")
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        raise # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}': {e}")
        raise # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —á—Ç–µ–Ω–∏—è
    return urls

def split_into_batches(urls, size):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ URL –Ω–∞ –±–∞—Ç—á–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
    if not urls:
        return []
    return [urls[i:i + size] for i in range(0, len(urls), size)]

def generate_tag_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ç–µ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."""
    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å "2" –≤ –∫–æ–Ω—Ü–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–µ—Ä–Ω–æ.
    return datetime.now().strftime("%d %m %Y") + "2"

def get_download_file_pattern():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –°–ï–ì–û–î–ù–Ø."""
    today_date_str = datetime.now().strftime("%Y-%m-%d")
    # –§–æ—Ä–º–∞—Ç: 'Profiles downloaded from lh-* at –ì–ì–ì–ì-–ú–ú-–î–î T *.csv'
    return f"Profiles downloaded from lh-* at {today_date_str}T*.csv"

def check_downloaded_file(download_trigger_time, wait_duration, check_interval, file_pattern):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ DOWNLOAD_DIR,
    —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ü–û–°–õ–ï download_trigger_time.
    """
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É '{file_pattern}' (–æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ {wait_duration} —Å–µ–∫)...")
    cutoff_time = download_trigger_time - timedelta(seconds=5) # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
    end_wait = time.time() + wait_duration

    while time.time() < end_wait:
        try:
            # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            found_files = glob(os.path.join(DOWNLOAD_DIR, file_pattern))

            for file_path in found_files:
                if os.path.isfile(file_path):
                    try:
                        mod_time_ts = os.path.getmtime(file_path)
                        mod_time_dt = datetime.fromtimestamp(mod_time_ts)

                        if mod_time_dt > cutoff_time:
                            file_name = os.path.basename(file_path)
                            logging.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª: '{file_name}' (–∏–∑–º–µ–Ω–µ–Ω: {mod_time_dt:%Y-%m-%d %H:%M:%S})")
                            return file_name
                    except OSError as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞ '{file_path}': {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: {e}")

        time.sleep(check_interval) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥

    logging.warning(f"–ù–æ–≤—ã–π CSV —Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É '{file_pattern}', –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –ø–æ—Å–ª–µ {cutoff_time:%H:%M:%S}, –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {wait_duration} —Å–µ–∫.")
    return None


# --- –ö–õ–ê–°–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò ---

class LinkedHelperAutomator:
    def __init__(self):
        self.driver = None
        self.wait = None
        self.profile_urls = []
        self.batches = []
        self.total_profiles = 0
        self.num_batches = 0
        self.download_trigger_time = None
        self.tag_name = generate_tag_name()

    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç WebDriver."""
        logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π Chrome...")
        chrome_options = ChromeOptions()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--lang=en-US") # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–¥–∞—Ç—å —è–∑—ã–∫

        logging.info(f"–§–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {DOWNLOAD_DIR}")
        prefs = {
            "download.default_directory": DOWNLOAD_DIR,
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "safeBrowse.enabled": True
        }
        chrome_options.add_experimental_option("prefs", prefs)

        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome...")
        try:
            if CHROMEDRIVER_PATH and os.path.exists(CHROMEDRIVER_PATH):
                service = ChromeService(executable_path=CHROMEDRIVER_PATH)
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ PATH
                service = ChromeService() # –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫ –¥–ª—è Selenium 4+
                self.driver = webdriver.Chrome(service=service, options=chrome_options)
            logging.info("–î—Ä–∞–π–≤–µ—Ä Chrome —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
            self.wait = WebDriverWait(self.driver, WEBDRIVER_TIMEOUT)
        except WebDriverException as e:
            logging.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ chromedriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω (–∏–ª–∏ —É–∫–∞–∑–∞–Ω CHROMEDRIVER_PATH).")
            raise

    def _login(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ö–æ–¥ –≤ Linked Helper."""
        logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞: {LH_LOGIN_URL}")
        self.driver.get(LH_LOGIN_URL)

        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ 'Log in'...")
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ div
            login_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["login_button_div"])))
            login_button.click()
        except (TimeoutException, ElementNotInteractableException):
             logging.warning("–ö–Ω–æ–ø–∫–∞ 'Log in' (div) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞, –ø—Ä–æ–±—É–µ–º button...")
             try:
                 # –ü—Ä–æ–±—É–µ–º button
                 login_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["login_button_button"])))
                 login_button.click()
             except Exception as e:
                 logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ 'Log in': {e}")
                 raise # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ª–æ–≥–∏–Ω–∞

        logging.info("–í–≤–æ–¥ email...")
        email_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["email_field"])))
        # email_field.click() # –ö–ª–∏–∫ —á–∞—Å—Ç–æ –Ω–µ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–¥ send_keys
        email_field.send_keys(LINKEDHELPER_EMAIL)

        logging.info("–í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...")
        password_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["password_field"])))
        password_field.send_keys(LINKEDHELPER_PASSWORD)

        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ (Enter)...")
        password_field.send_keys(Keys.ENTER)
        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
        # –û–∂–∏–¥–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞
        self.wait.until(EC.staleness_of(password_field)) # –ñ–¥–µ–º –ø–æ–∫–∞ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç
        # –ò–ª–∏ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # self.wait.until(EC.visibility_of_element_located((By.XPATH, "XPATH_–ü–û–°–õ–ï_–õ–û–ì–ò–ù–ê")))
        logging.info("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")


    def _launch_instance(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å Linked Helper."""
        logging.info("–ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 'idle'
            logging.info("–ò—â–µ–º —Å—Ç–∞—Ç—É—Å 'idle'...")
            idle_status = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["instance_status_idle"])))
            idle_status.click() # –ö–ª–∏–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
            logging.info("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ 'Launch'...")
            launch_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["launch_button_idle"])))
            launch_button.click()
            logging.info("–ò–Ω—Å—Ç–∞–Ω—Å –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 'idle'.")
        except (TimeoutException, ElementNotInteractableException, NoSuchElementException) as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 'idle' ({e.__class__.__name__}), –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 'stopped'.")
            try:
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ 'stopped'
                logging.info("–ò—â–µ–º —Å—Ç–∞—Ç—É—Å 'stopped'...")
                stopped_status = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["instance_status_stopped"])))
                stopped_status.click() # –ö–ª–∏–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
                logging.info("–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ 'Launch' (–¥–ª—è stopped)...")
                launch_button_stopped = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["launch_button_stopped"])))
                launch_button_stopped.click()

                # –ò–Ω–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø. –∫–Ω–æ–ø–∫–∞ "Start account on remote machine"
                try:
                    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ 'Start account on remote machine'...")
                    start_remote_button = WebDriverWait(self.driver, 5).until( # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                        EC.element_to_be_clickable((By.XPATH, XPATHS["start_remote_button"]))
                    )
                    logging.info("–ö–ª–∏–∫ 'Start account on remote machine'...")
                    start_remote_button.click()
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–ª–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    # time.sleep(5) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                except TimeoutException:
                    logging.info("'Start account on remote machine' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

                logging.info("–ò–Ω—Å—Ç–∞–Ω—Å –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 'stopped'.")

            except Exception as nested_e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç–∞–Ω—Å –Ω–∏ —á–µ—Ä–µ–∑ 'idle', –Ω–∏ —á–µ—Ä–µ–∑ 'stopped': {nested_e}")
                raise # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞

        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç–∞–Ω—Å–∞...")
        # –í–º–µ—Å—Ç–æ sleep, –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è iframe –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        self._switch_to_iframe() # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è —Å—Ä–∞–∑—É

    def _switch_to_iframe(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ iframe –∏–Ω—Å—Ç–∞–Ω—Å–∞."""
        try:
            logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ iframe '{XPATHS['iframe_instance']}' (–¥–æ {IFRAME_TIMEOUT} —Å–µ–∫)...")
            self.wait = WebDriverWait(self.driver, IFRAME_TIMEOUT) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è iframe
            self.wait.until(EC.frame_to_be_available_and_switch_to_it((By.ID, XPATHS["iframe_instance"])))
            self.wait = WebDriverWait(self.driver, WEBDRIVER_TIMEOUT) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            logging.info("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ iframe.")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ iframe –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            self.wait.until(EC.visibility_of_element_located((By.XPATH, XPATHS["campaigns_menu_button"])))
            logging.info("Iframe –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç Campaigns).")
        except TimeoutException:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ iframe '{XPATHS['iframe_instance']}' –∑–∞ {IFRAME_TIMEOUT} —Å–µ–∫—É–Ω–¥.")
            raise

    def _navigate_to_campaign(self):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –Ω—É–∂–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –≤–Ω—É—Ç—Ä–∏ iframe."""
        logging.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é Campaigns...")
        open_campaigns_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["campaigns_menu_button"])))
        open_campaigns_btn.click()

        logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞–º–ø–∞–Ω–∏–∏ 'hr emails'...")
        open_emails_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["campaign_link_hr_emails"])))
        open_emails_link.click()
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∏ Add)
        self.wait.until(EC.visibility_of_element_located((By.XPATH, XPATHS["add_profile_button"])))
        logging.info("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–∞–º–ø–∞–Ω–∏—é 'hr emails'.")

    def _process_one_batch(self, batch_urls, batch_num_display, total_batches):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á URL —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
        batch_text = "\n".join(batch_urls)
        num_profiles = len(batch_urls)
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num_display}/{total_batches} ({num_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π)...")

        for attempt in range(MAX_BATCH_ADD_RETRIES):
            logging.info(f"  –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_BATCH_ADD_RETRIES}...")
            try:
                # --- –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞ ---
                logging.info("  –í—Å—Ç–∞–≤–∫–∞ URL –ø—Ä–æ—Ñ–∏–ª–µ–π...")
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ö–ê–ñ–î–´–ô —Ä–∞–∑ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π
                input_textarea = self.wait.until(
                     EC.visibility_of_element_located((By.XPATH, XPATHS["profile_urls_textarea"]))
                )
                input_textarea.clear() # –û—á–∏—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                input_textarea.send_keys(batch_text)
                # time.sleep(0.5) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                logging.info("  –ö–ª–∏–∫ 'Import'...")
                import_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["import_button"])))
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                WebDriverWait(self.driver, 3).until(EC.visibility_of(import_button))
                import_button.click()

                # --- –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–º–ø–æ—Ä—Ç–∞ ---
                # –í–º–µ—Å—Ç–æ sleep, –∂–¥–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—Ö–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É,
                # –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å –±—ã—Å—Ç—Ä—ã–π.
                # –ü—Ä–∏–º–µ—Ä: –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ Import —Å–Ω–æ–≤–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –∏—Å—á–µ–∑–Ω–µ—Ç
                try:
                    # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ Import –∏—Å—á–µ–∑–Ω–µ—Ç –ò–õ–ò —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –æ—á–∏—Å—Ç–∏—Ç—Å—è (–≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ)
                     WebDriverWait(self.driver, 15).until(EC.staleness_of(import_button))
                     logging.info(f"  –ë–∞—Ç—á {batch_num_display} - –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –£–°–ü–ï–®–ù–ê.")
                     return True
                except TimeoutException:
                     # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª, –Ω–æ UI –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å
                     # –ò–ª–∏ –º–æ–∂–Ω–æ –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "Imported: N" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                     logging.warning(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—Ö –∏–º–ø–æ—Ä—Ç–∞ –±–∞—Ç—á–∞ {batch_num_display} –ø–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—é –∫–Ω–æ–ø–∫–∏. –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º.")
                     # time.sleep(1) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥. –±–∞—Ç—á–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                     return True
                # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–∞ ---

            except (TimeoutException, ElementClickInterceptedException, StaleElementReferenceException, NoSuchElementException, ElementNotInteractableException) as e:
                logging.warning(f"  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch_num_display} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e.__class__.__name__}")
                # traceback.print_exc() # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
                if attempt < MAX_BATCH_ADD_RETRIES - 1:
                    logging.info(f"  –û–∂–∏–¥–∞–Ω–∏–µ {BATCH_RETRY_WAIT_SECONDS} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(BATCH_RETRY_WAIT_SECONDS)
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –Ω–µ —Å—Ç–æ–∏—Ç –∑–¥–µ—Å—å.
                    # –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –æ–≤–µ—Ä–ª–µ–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
                else:
                    logging.error(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á {batch_num_display} –ø–æ—Å–ª–µ {MAX_BATCH_ADD_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.")
                    return False # –ù–µ—É–¥–∞—á–∞ —ç—Ç–æ–≥–æ –±–∞—Ç—á–∞
            except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
                  logging.error(f"  –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ {batch_num_display} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                  traceback.print_exc()
                  if attempt < MAX_BATCH_ADD_RETRIES - 1:
                      logging.info(f"  –û–∂–∏–¥–∞–Ω–∏–µ {BATCH_RETRY_WAIT_SECONDS} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                      time.sleep(BATCH_RETRY_WAIT_SECONDS)
                  else:
                      logging.error(f"  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞—Ç—á {batch_num_display} –ø–æ—Å–ª–µ {MAX_BATCH_ADD_RETRIES} –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.")
                      return False # –ù–µ—É–¥–∞—á–∞
        # –ï—Å–ª–∏ —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ —É—Å–ø–µ—Ö–∞ (—Ö–æ—Ç—è return –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–Ω—å—à–µ)
        return False

    def _add_profiles_in_batches(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –±–∞—Ç—á–∞–º–∏."""
        last_processed_index = read_last_processed_batch_index()
        start_batch_index = last_processed_index + 1

        if start_batch_index >= self.num_batches:
            logging.info("–í—Å–µ –±–∞—Ç—á–∏ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return True # –°—á–∏—Ç–∞–µ–º —ç—Ç–æ—Ç —ç—Ç–∞–ø —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–µ–π —Å {start_batch_index + 1} –ø–æ {self.num_batches}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º
        logging.info("–ö–ª–∏–∫ 'Add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        add_button = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["add_profile_button"])))
        add_button.click()

        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫ 'Upload Profiles URLs'...")
        input_profiles_tab = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["upload_urls_tab"])))
        input_profiles_tab.click()
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –Ω–∞ —Ç–∞–±
        self.wait.until(EC.visibility_of_element_located((By.XPATH, XPATHS["profile_urls_textarea"])))
        logging.info("–û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è URL –≥–æ—Ç–æ–≤–æ.")


        successful_batches_count = 0
        failed_batches = []

        for i in range(start_batch_index, self.num_batches):
            current_batch_index = i
            batch = self.batches[current_batch_index]
            batch_num_display = current_batch_index + 1

            success = self._process_one_batch(batch, batch_num_display, self.num_batches)

            if success:
                successful_batches_count += 1
                write_last_processed_batch_index(current_batch_index) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ò–ù–î–ï–ö–° —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                if current_batch_index < self.num_batches - 1:
                    if BATCH_PROCESS_WAIT_TIME > 0:
                       logging.debug(f"–ü–∞—É–∑–∞ {BATCH_PROCESS_WAIT_TIME} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º...")
                       time.sleep(BATCH_PROCESS_WAIT_TIME)
            else:
                failed_batches.append(batch_num_display)
                logging.warning(f"–ë–∞—Ç—á {batch_num_display} –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –±–∞—Ç—á–µ–º
                send_telegram_message(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞—Ç—á {batch_num_display} –∫–∞–º–ø–∞–Ω–∏–∏ 'hr emails' –ø–æ—Å–ª–µ {MAX_BATCH_ADD_RETRIES} –ø–æ–ø—ã—Ç–æ–∫."
                )
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –±–∞—Ç—á–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ

        logging.info(f"--- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")
        logging.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {successful_batches_count} –±–∞—Ç—á–µ–π.")
        if failed_batches:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞—Ç—á–∏: {', '.join(map(str, failed_batches))}")
            # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–ø—É—Å–∫ –±–∞—Ç—á–µ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
            # return False # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º
        return True # –°—á–∏—Ç–∞–µ–º —ç—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏

    def _tag_profiles_in_queue(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ 'New' (Queue) –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥."""
        logging.info("–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–∞–º–ø–∞–Ω–∏–∏...")
        # XPath –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω
        try:
            expand_campaign = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["expand_campaign_button"])))
            expand_campaign.click()
            # time.sleep(1) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞): {e}")

        logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ 'New' (Queue)...")
        # XPath –¥–ª—è New/Queue –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω
        new_profile_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["new_queue_link"])))
        new_profile_link.click()

        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ 'New'...")
        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "No profiles"
        try:
             WebDriverWait(self.driver, 15).until(
                 EC.any_of(
                     EC.element_to_be_clickable((By.XPATH, XPATHS["select_all_new_checkbox"])),
                     EC.visibility_of_element_located((By.XPATH, XPATHS["no_profiles_indicator"]))
                 )
             )
        except TimeoutException:
             logging.warning("–°–ø–∏—Å–æ–∫ 'New' –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—á–µ–∫–±–æ–∫—Å / 'No profiles').")
             # –†–µ—à–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.
             # return False # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            self.driver.find_element(By.XPATH, XPATHS["no_profiles_indicator"])
            logging.info("–°–ø–∏—Å–æ–∫ 'New' –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            return True # –¢–µ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ, —ç—Ç–∞–ø —É—Å–ø–µ—à–µ–Ω
        except NoSuchElementException:
             logging.info("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –≤ 'New'. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—é...")
             # –ü—Ä–æ—Ñ–∏–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        try:
            logging.info("–í—ã–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ 'New'...")
            select_all_new = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["select_all_new_checkbox"])))
            # –ò–Ω–æ–≥–¥–∞ –Ω—É–∂–µ–Ω JS click
            self.driver.execute_script("arguments[0].click();", select_all_new)
            # time.sleep(1) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

            logging.info("–ö–ª–∏–∫ 'Add tag'...")
            add_tag_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["add_tag_button"])))
            add_tag_btn.click()

            logging.info(f"–í–≤–æ–¥ —Ç–µ–≥–∞: {self.tag_name}...")
            input_tag_field = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["tag_input_field"])))
            input_tag_field.send_keys(self.tag_name)
            # time.sleep(0.5) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞

            logging.info("–ö–ª–∏–∫ 'Save' –¥–ª—è —Ç–µ–≥–∞...")
            save_tag_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["save_tag_button"])))
            save_tag_btn.click()

            logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ Save —Å—Ç–∞–Ω–µ—Ç –Ω–µ–≤–∏–¥–∏–º–æ–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
            self.wait.until(EC.invisibility_of_element_located((By.XPATH, XPATHS["save_tag_button"])))
            logging.info("–¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return True

        except (TimeoutException, NoSuchElementException, ElementNotInteractableException) as tag_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥: {tag_error}")
            # traceback.print_exc() # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return False # –û—à–∏–±–∫–∞ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    def _start_campaign_and_wait(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –∏ –æ–∂–∏–¥–∞–µ—Ç –µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        logging.info("–ö–ª–∏–∫ 'Start campaign'...")
        try:
            start_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["start_campaign_button"])))
            start_btn.click()
            logging.info("–ö–∞–º–ø–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ "Stop campaign" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å 'Start campaign': {e}")
            return False # –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞

        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ *–≤—Å–µ—Ö* –ø—Ä–æ—Ñ–∏–ª–µ–π, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ
        # –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ —Å—á–∏—Ç–∞—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤ 'New' –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º?
        profiles_to_process = self.total_profiles # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞

        if profiles_to_process > 0:
            # –§–æ—Ä–º—É–ª–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞, —É—Ç–æ—á–Ω–µ–Ω–∞ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            process_wait_time_float = (profiles_to_process / 20.0) * SECONDS_PER_20_PROFILES_PROCESS
            process_wait_time = max(MIN_PROCESS_WAIT_SECONDS, math.ceil(process_wait_time_float))
            logging.info(f"–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({profiles_to_process} –ø—Ä–æ—Ñ–∏–ª–µ–π): {process_wait_time} —Å–µ–∫...")
            time.sleep(process_wait_time) # –û—Å—Ç–∞–≤–ª—è–µ–º sleep, —Ç.–∫. –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logging.info("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        else:
            logging.info("–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ.")
            # time.sleep(MIN_PROCESS_WAIT_SECONDS) # –ò–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–∞?

        return True

    def _download_successful_profiles(self):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ 'Successful', —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ç–µ–≥—É –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç."""
        logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ 'Successful'...")
        try:
            successful_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["successful_list_link"])))
            successful_link.click()
            logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ 'Successful'...")
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–µ–≥–æ–≤ –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "No profiles"
            WebDriverWait(self.driver, 15).until(
                 EC.any_of(
                     EC.visibility_of_element_located((By.XPATH, XPATHS["tag_filter_input"])),
                     EC.visibility_of_element_located((By.XPATH, XPATHS["no_profiles_indicator"]))
                 )
            )
        except Exception as e:
             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ 'Successful' –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫: {e}")
             return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –ø–µ—Ä–µ–π—Ç–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ Successful –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        try:
            self.driver.find_element(By.XPATH, XPATHS["no_profiles_indicator"])
            logging.info("–°–ø–∏—Å–æ–∫ 'Successful' –ø—É—Å—Ç. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return "no_profiles_to_download" # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
        except NoSuchElementException:
             logging.info("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ –≤ 'Successful'. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
             # –ü—Ä–æ—Ñ–∏–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        try:
            logging.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥—É: {self.tag_name}...")
            tag_filter_input = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["tag_filter_input"])))
            tag_filter_input.send_keys(self.tag_name)
            tag_filter_input.send_keys(Keys.ENTER)

            logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞...")
            # –°–ª–æ–∂–Ω–æ –Ω–∞–¥–µ–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ú–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É. –ò–ª–∏ –∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞/no items found
            try:
                WebDriverWait(self.driver, 15).until(
                    EC.any_of(
                         EC.element_to_be_clickable((By.XPATH, XPATHS["select_all_successful_checkbox"])),
                         EC.visibility_of_element_located((By.XPATH, XPATHS["no_profiles_indicator"])) # –¢–æ—Ç –∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä?
                    )
                )
            except TimeoutException:
                 logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ–∫–±–æ–∫—Å –∏–ª–∏ 'No items found').")
                 # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –ü–û–°–õ–ï —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            try:
                self.driver.find_element(By.XPATH, XPATHS["no_profiles_indicator"])
                logging.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ —Å —Ç–µ–≥–æ–º '{self.tag_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ 'Successful'. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                return "no_profiles_to_download" # –°–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
            except NoSuchElementException:
                 logging.info(f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª–∏ —Å —Ç–µ–≥–æ–º '{self.tag_name}'. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é...")
                 # –ü—Ä–æ—Ñ–∏–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

            logging.info("–í—ã–±–æ—Ä –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ 'Successful' (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞)...")
            select_all_succ = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["select_all_successful_checkbox"])))
            self.driver.execute_script("arguments[0].click();", select_all_succ)
            # time.sleep(1) # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

            logging.info("–ö–ª–∏–∫ 'Download'...")
            download_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["download_button"])))
            download_btn.click()

            logging.info("–ö–ª–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 'Download'...")
            confirm_download_btn = self.wait.until(EC.element_to_be_clickable((By.XPATH, XPATHS["confirm_download_button"])))
            confirm_download_btn.click()

            self.download_trigger_time = datetime.now() # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            logging.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –≤ {self.download_trigger_time:%H:%M:%S}. –û–∂–∏–¥–∞–Ω–∏–µ {DOWNLOAD_WAIT_SECONDS} —Å–µ–∫...")
            time.sleep(DOWNLOAD_WAIT_SECONDS) # –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
            file_pattern = get_download_file_pattern()
            downloaded_file_name = check_downloaded_file(
                self.download_trigger_time,
                DOWNLOAD_CHECK_ADDITIONAL_TIME, # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫
                DOWNLOAD_CHECK_INTERVAL,
                file_pattern
            )

            if downloaded_file_name:
                logging.info(f"–£—Å–ø–µ—Ö! –§–∞–π–ª '{downloaded_file_name}' –Ω–∞–π–¥–µ–Ω –≤ {DOWNLOAD_DIR}")
                return downloaded_file_name # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            else:
                logging.error("–û–®–ò–ë–ö–ê: –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è!")
                return None # –û—à–∏–±–∫–∞ - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω

        except (TimeoutException, NoSuchElementException, ElementNotInteractableException) as dl_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã: {dl_error}")
            # traceback.print_exc() # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑, –º–æ–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
            try:
                self.driver.find_element(By.XPATH, XPATHS["no_profiles_indicator"])
                logging.warning("–°–ø–∏—Å–æ–∫ 'Successful' –ø—É—Å—Ç –∏–ª–∏ —Å—Ç–∞–ª –ø—É—Å—Ç –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ.")
                return "no_profiles_to_download" # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
            except NoSuchElementException:
                logging.error("–°–ø–∏—Å–æ–∫ 'Successful' –ù–ï –ø—É—Å—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.")
                return None # –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

    def _quit_driver(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç WebDriver."""
        if self.driver:
            try:
                logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")
                self.driver.quit()
                self.driver = None
                self.wait = None
                logging.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏."""
        downloaded_file_name = None
        try:
            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
            self.profile_urls = read_profile_urls(PROFILES_INPUT_FILE)
            self.total_profiles = len(self.profile_urls)
            if self.total_profiles == 0:
                logging.info("–ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                return "no_profiles_in_input" # –£—Å–ø–µ—Ö, –Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ—á–µ–≥–æ

            self.batches = split_into_batches(self.profile_urls, BATCH_SIZE)
            self.num_batches = len(self.batches)
            logging.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–æ {self.total_profiles} –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ {self.num_batches} –±–∞—Ç—á–µ–π (—Ä–∞–∑–º–µ—Ä: {BATCH_SIZE}).")

            # --- –ó–∞–ø—É—Å–∫ WebDriver –∏ –ª–æ–≥–∏–Ω ---
            self._setup_driver()
            self._login()
            self._launch_instance() # –í–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ iframe

            # --- –†–∞–±–æ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ iframe ---
            self._navigate_to_campaign()

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if not self._add_profiles_in_batches():
                 # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–π –∫—Ä–∏—Ç–∏—á–Ω–æ –∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–≥–∏–∫–∏ _add_profiles_in_batches)
                 # logging.error("–≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                 # raise Exception("Failed to add profile batches") # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                 logging.warning("–ë—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞—Ç—á–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")


            # –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ 'New'
            if not self._tag_profiles_in_queue():
                 # –ï—Å–ª–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                 # logging.error("–≠—Ç–∞–ø —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
                 # raise Exception("Failed to tag profiles")
                 logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ New –±—ã–ª –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ.")
            else:
                 # –ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ)
                 if not self._start_campaign_and_wait():
                      # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
                      # raise Exception("Failed to start campaign or wait")
                      logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")


            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            download_result = self._download_successful_profiles()

            if download_result == "no_profiles_to_download":
                logging.info("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª–æ—Å—å (–ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Successful –∏–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞).")
                downloaded_file_name = "skipped" # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä —É—Å–ø–µ—Ö–∞ –±–µ–∑ —Ñ–∞–π–ª–∞
            elif download_result is None:
                 logging.error("–≠—Ç–∞–ø —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.")
                 # –†–µ—à–∞–µ–º, –∫—Ä–∏—Ç–∏—á–Ω–æ –ª–∏ —ç—Ç–æ
                 # raise Exception("Failed to download results")
                 downloaded_file_name = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –æ—à–∏–±–∫—É
            else:
                 downloaded_file_name = download_result # –ò–º—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞


            # --- –í—ã—Ö–æ–¥ –∏–∑ iframe ---
            logging.info("–í—ã—Ö–æ–¥ –∏–∑ iframe (–≤–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É)...")
            self.driver.switch_to.default_content()
            logging.info("–†–∞–±–æ—Ç–∞ —Å iframe –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            return downloaded_file_name # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ "skipped" –∏–ª–∏ None

        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e.__class__.__name__} - {e}")
            traceback.print_exc()
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–¥ –ø–∞–¥–µ–Ω–∏–µ–º
            # self._save_debug_screenshot("error_state") # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å _save_debug_screenshot
            raise # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        finally:
            self._quit_driver()


# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ ---
if __name__ == "__main__":
    retries = 0
    final_success = False
    final_message = ""
    result_file = None
    last_exception = None

    while retries < MAX_SCRIPT_RETRIES:
        logging.info(f"\n--- –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: –ü–æ–ø—ã—Ç–∫–∞ {retries + 1} –∏–∑ {MAX_SCRIPT_RETRIES} ---")
        automator = LinkedHelperAutomator()
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
            result = automator.run()

            if result == "no_profiles_in_input":
                 final_success = True
                 final_message = f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω (–ü–æ–ø—ã—Ç–∫–∞ {retries + 1}): –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª {PROFILES_INPUT_FILE} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL."
                 logging.info(final_message)
                 break
            elif result == "skipped": # –£—Å–ø–µ—Ö, –Ω–æ —Ñ–∞–π–ª –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª—Å—è (–Ω–µ –±—ã–ª–æ –ø—Ä–æ—Ñ–∏–ª–µ–π)
                final_success = True
                final_message = f"‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–ü–æ–ø—ã—Ç–∫–∞ {retries + 1}). –ü—Ä–æ—Ñ–∏–ª–∏ –≤ 'Successful' —Å –Ω—É–∂–Ω—ã–º —Ç–µ–≥–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏, —Ñ–∞–π–ª –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª—Å—è."
                logging.info(final_message)
                break
            elif result: # –£—Å–ø–µ—Ö, —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω
                final_success = True
                result_file = result
                final_message = f"‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–ü–æ–ø—ã—Ç–∫–∞ {retries + 1}). –§–∞–π–ª '{result_file}' —Å–∫–∞—á–∞–Ω –≤ {DOWNLOAD_DIR}."
                logging.info(final_message)
                break
            else: # –û—à–∏–±–∫–∞: run() –≤–µ—Ä–Ω—É–ª None (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∞—è –Ω–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ run)
                final_success = False
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ª–æ–≥–µ –∏–∑ automator.run()
                final_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ü–æ–ø—ã—Ç–∫–∏ {retries + 1}: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ run() –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å). –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ."
                logging.error(final_message)
                # last_exception = ? # –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–¥–µ—Å—å
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏

        except FileNotFoundError as e: # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
             final_success = False
             last_exception = e
             final_message = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
             logging.critical(final_message)
             send_telegram_message(final_message)
             break # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏

        except WebDriverException as e: # –û—à–∏–±–∫–∞ Selenium/WebDriver
            final_success = False
            last_exception = e
            error_details = str(e).split('\n')[0] # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            final_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebDriver (–ü–æ–ø—ã—Ç–∫–∞ {retries + 1}): {e.__class__.__name__}. {error_details}"
            logging.error(final_message, exc_info=True) # –õ–æ–≥–≥–∏—Ä—É–µ–º —Å traceback
            send_telegram_message(f"{final_message}\n–ü—Ä–æ–±–ª–µ–º–∞ —Å chromedriver –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º.")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏

        except Exception as e: # –î—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            final_success = False
            last_exception = e
            final_message = f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–ü–æ–ø—ã—Ç–∫–∞ {retries + 1}): {e.__class__.__name__} - {e}"
            logging.error(final_message, exc_info=True) # –õ–æ–≥–≥–∏—Ä—É–µ–º —Å traceback
            send_telegram_message(f"{final_message}\n{str(e)[:200]}") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ –±–µ–∑ break, –∑–Ω–∞—á–∏—Ç –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        retries += 1
        if retries < MAX_SCRIPT_RETRIES:
            logging.info(f"–ü–∞—É–∑–∞ {RETRY_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            time.sleep(RETRY_DELAY_SECONDS)
        elif not final_success: # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –æ–Ω–∞ –Ω–µ —É—Å–ø–µ—à–Ω–∞
            final_message = f"‚ùå –°–∫—Ä–∏–ø—Ç –ù–ï –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ –ø–æ—Å–ª–µ {MAX_SCRIPT_RETRIES} –ø–æ–ø—ã—Ç–æ–∫."
            logging.error(final_message)
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π –Ω–µ—É–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∏–∂–µ

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—â–µ–º –∏—Ç–æ–≥–µ
    if final_message:
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FileNotFoundError
         # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —É—Å–ø–µ—Ö
         if final_success or not isinstance(last_exception, FileNotFoundError):
              send_telegram_message(final_message)
         elif isinstance(last_exception, FileNotFoundError):
              # –°–æ–æ–±—â–µ–Ω–∏–µ –æ FileNotFoundError —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ
              pass

    logging.info("\n--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ ---")